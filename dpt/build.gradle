import org.apache.commons.io.FileUtils

import java.nio.charset.Charset

apply plugin: 'java-library'


java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


jar {
    archiveBaseName = "dpt"
    archiveVersion = "1.0"
    archiveFileName.set("dpt.jar")
    manifest {
        attributes 'Main-Class': 'com.luoye.dpt.Dpt'
    }
    destinationDirectory = new File("$rootProject.projectDir/executable")
    // Collect files
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from fileTree(dir: 'src/main', includes: ['assets/**'])

    // Exclude rules
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA',
            'META-INF/*.MF', 'META-INF/*.txt', 'META-INF/versions/**',
            'META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/NOTICE',
            'META-INF/plexus/components.xml'

    manifest {
        attributes("Implementation-Title": archiveBaseName,
                "Implementation-Version": archiveVersion,
                "Build-Time": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Build-Number": System.env.BUILD_NUMBER ? System.env.BUILD_NUMBER : "-1",
        )
    }
    from(project.parent.projectDir) {
        include 'NOTICE.txt'
        include 'LICENSE.txt'
        into('META-INF')
    }
}

sourceSets.main.resources {
    srcDirs = [
            "src/main/java",
    ];
    include "**/*.*"
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def excludeRules = [
    "Landroid/.*",
    "Landroidx/.*",
    "Lcom/squareup/okhttp/.*",
    "Lokio/.*", "Lokhttp3/.*",
    "Lkotlin/.*",
    "Lkotlinx/.*",
    "Lcom/google/.*",
    "Lrx/.*",
    "Lorg/apache/.*",
    "Lretrofit2/.*",
    "Lcom/alibaba/.*",
    "Lcom/alipay/.*",
    "Lcom/amap/api/.*",
    "Lcom/sina/weibo/sdk/.*",
    "Lcom/xiaomi/.*",
    "Lcom/huawei/.*",
    "Lcom/vivo/.*",
    "Lcom/baytedance/.*",
    "Lcom/eclipsesource/.*",
    "Lcom/blankj/utilcode/.*",
    "Lcom/umeng/.*",
    "Ljavax/.*",
    "Lorg/slf4j/.*"
]

afterEvaluate {
    def excludeFile = new File(project.projectDir.getParent() + File.separator + "executable", "dpt-exclude-classes-template.rules")

    if(!excludeFile.exists()) {
        for (excludeRule in excludeRules) {
            FileUtils.write(excludeFile, excludeRule + "\n", Charset.forName("UTF-8"), true)
        }
    }
    else {
        println("File exists: ${excludeFile}")
    }

}

dependencies {
    implementation fileTree(dir:'libs',include:['*.jar'])
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.5'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '4.30.2'
    implementation group: 'com.android.tools.build', name: 'aapt2-proto', version: '8.8.2-12006047'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
    implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    implementation group: 'com.linkedin.dexmaker', name: 'dexmaker', version: '2.28.5'
    implementation group: 'com.android.tools.smali', name: 'smali-dexlib2', version: '3.0.9'
    implementation("com.google.guava:guava:33.4.8-jre")

    testImplementation 'junit:junit:4.+'
}